# .cursorrules
# 项目信息
项目名称：Lacne React 管理系统
技术栈：Vite 5 + React 18 + TypeScript 5 + Ant Design 5 + TailwindCSS
包管理：pnpm 8.x
版本：1.1.0
项目初始化方式：`pnpm create vite@latest mis-react-tel -- --template react-ts`

# 核心架构原则
1. 类型安全第一：所有 API 交互必须有完整 TypeScript 类型定义
2. 分层架构：
   - 服务层：API 请求封装
   - 业务层：模块化状态管理
   - 表现层：UI 组件
3. 请求标准化：所有 HTTP 请求必须通过 services/request 封装

# 技术栈
1. 构建工具: Vite (极速构建)
2. 框架: React 18 + TypeScript
3. UI 库: Ant Design 5.x（从pro降级）
4. 样式: TailwindCSS
5. 路由: React Router v6
6. 状态管理: Zustand (轻量级)
7. HTTP 客户端: Axios + React Query
8. 代码规范: Biome
9. 统一 pnpm 包管理
10. 枚举定义库 enum-plus
12. Lodash 

# 编码规范

## React 规范
- 组件定义：函数组件优先
- Props 类型：使用 interface 定义
- Hooks 使用规则：
  - 所有 hook 以 "use" 前缀命名
  - useState 初始值必须显式声明类型
- 状态管理：Zustand 优先于 Context API
- 禁止使用：any 类型

## TypeScript 规范
- 强制类型：
  - API 请求/响应：必须定义完整接口
  - 组件 Props：必须使用 interface 定义
  - 状态管理：Zustand store 必须定义状态接口
- 类型文件：
  - 全局类型：types/*.d.ts
  - 模块类型：modules/[module]/types.ts
- 禁止使用 any，特殊场景使用 unknown 替代
- 泛型：单字母大写 (T, U, K)

## 请求服务层规范 (services/request)

### 核心文件结构
services/request/
├── api.ts              # Axios 实例 & 基础方法
├── types.ts            # 请求/响应类型定义
├── interceptor.ts      # 拦截器实现
└── error.ts            # 错误处理工具

### 类型安全要求
1. 定义标准响应结构：
```typescript
// services/request/types.ts
export interface ApiResponse<T> {
  code: number;
  message: string;
  data: T;
  timestamp: number;
}

```
2. 实现错误分类：
```typescript
// services/request/error.ts
export class ApiError<T> extends Error {
  constructor(
    public code: number,
    public response?: AxiosResponse<ApiResponse<T>>,
    message?: string
  ) {
    super(message || `API Error: ${code}`);
    this.name = 'ApiError';
  }
}
```
### 拦截器实现规范


1. 请求拦截器：
    - 自动添加 Authorization 头
    - 添加请求时间戳
    - 序列化特殊数据类型
2. 响应拦截器：
    - 处理 HTTP 状态码异常
    - 统一业务错误处理 (code ≠ 200)
    - 401 自动跳转登录
    - 500+ 错误上报

### 请求方法封装

必须使用以下方法：

```typescript
// services/request/api.ts
export const http = {
  get: <T>(url: string, params?: object) => 
    axiosInstance.get<ApiResponse<T>>(url, { params }).then(res => res.data),
  
  post: <T, D>(url: string, data: D) => 
    axiosInstance.post<ApiResponse<T>>(url, data).then(res => res.data),
  
  // 安全请求方法（自动错误捕获）
  safeRequest: async <T, D>(config: AxiosRequestConfig<D>) => {
    try {
      const res = await axiosInstance.request<ApiResponse<T>>(config);
      return { success: true, data: res.data };
catch (error) {

      // 标准化错误处理
}
```
## 组件开发规范

### 组件类型

```typescript
interface UserCardProps {
  userId: string;
  onSelect?: (id: string) => void;
const UserCard: React.FC<UserCardProps> = ({ userId, onSelect }) => {
  // 组件逻辑
}
```

### 状态管理
1. 模块状态：使用 `Zustand` 
2. 全局状态：`stores/` 目录下创建
2. 业务状态：`modules/` 目录下 `.store.ts` 中创建

项目结构规范

目录结构

mis-react-tel/
├── config/                       # vite 配置文件
├── public/                       # 静态资源
├── scripts/                      # 构建脚本
├── src/                          # 源代码
│   ├── assets/                    #  图片、字体、CSS 等静态资源
│   │   ├── icon/                   # icon            
│   │   ├── styles/                 # 样式文件               
│   ├── components/                # 公共组件
│   ├── pages/                     # 页面组件
│   ├── services/                  # API 服务
│   │   ├── request/                # 请求配置 （封装）
│   │      ├── api.ts               # 通用API
│   ├── modules                    # 通过模块来管理请求和数据状态，modules 以业务来区分，如果是公用就放到common
│   │   ├── common/       
│   │   │   ├── common.api.ts
│   │   │   ├── common.store.ts             
│   ├── stores/                 # 状态管理
│   ├── utils/                  # 工具函数
│   ├── hooks/ 
├── types/                      # 类型定义



## 开发流程规范

### API 开发流程
1. 在 `services/request/types.ts` 定义基础类型
2. 在模块目录下定义业务类型：`modules/{业务模块名}/types.ts`
3. 请求使用 `Zustand` 状态封装，业务页面不直接调用借口
4. 在模块 .api.ts 中实现请求方法：

```typescript
// modules/demo/api.ts
import { http } from '@/services/request/api';

export const fetchdemoList = (params: DemoQueryParams) => {
  return http.get<demoListItem[]>('/api/demo', params);
}

```
5. api的使用：

```typescript
const { data, isLoading } = useQuery({
  queryKey: ['users'],
  queryFn: fetchUserList
});
```
6. api 优先在 .store.ts 状态里使用，业务直接用 .store.ts 里的状态

## 错误处理规范


1. API 错误处理：
    - 4xx 错误：显示用户友好提示
    - 5xx 错误：记录日志并上报
    - 特殊错误代码：
        - 401: 跳转登录
        - 403: 权限不足提示


## 性能优化策略

### 请求优化
1. 请求合并：相同 API 60s 内不重复请求
2. 响应缓存：使用 React Query 缓存策略
3. 请求取消：AbortController 取消未完成请求

### 组件优化
1. 代码分割：

```typescript
   const UserList = lazy(() => import('@/pages/UserList'));
```
2. 虚拟滚动：长列表使用 Ant Design Virtualized Table

## 代码质量保障

*Biome 配置 (biome.json)*

```json
"$schema": "https://biomejs.dev/schemas/1.3.3/schema.json",
  "organizeImports": {
    "enabled": true
  },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": true,
      "correctness": {
        "noUndeclaredVariables": "error"
        }
    }
  },
  "formatter": {
    "enabled": true,
    "indentStyle": "space",
    "indentSize": 2
  },
  "typescript": {
    "parser": {
      "unsafeEnableDecoratorParsing": false
    }
  }
```
## Git 工作流
提交规范：
type(scope): description

可用类型:
feat     - 新功能
fix      - bug修复
docs     - 文档变更
style    - 代码样式
refactor - 重构代码
test     - 测试相关
chore    - 构建/工具变更


## 禁止行为
1. ❌ 禁止直接使用 `axios.create()`
2. ❌ 禁止在组件中直接调用 `fetch/XHR`
3. ❌ 禁止在非 `services/request` 目录创建API请求
4. ❌ 禁止提交包含 // @ts-ignore 的代码
5. ❌ 禁止在 useEffect 中直接修改状态而不加依赖项
